// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	. "github.com/yevhenii-babich/go-cources/oapigen/service/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all records from couchDB database
	// (GET /couch)
	GetCouch(ctx echo.Context, params GetCouchParams) error
	// Add new document in couchDB
	// (POST /couch)
	PostCouch(ctx echo.Context) error
	// Delete document from couchDB with given id
	// (DELETE /couch/{Id})
	DeleteCouchId(ctx echo.Context, id float32) error
	// Returns document with given id
	// (GET /couch/{Id})
	GetCouchId(ctx echo.Context, id float32) error
	// Update document in couchDB with given id
	// (PUT /couch/{Id})
	PutCouchId(ctx echo.Context, id float32) error
	// Get status
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Returns all records from database
	// (GET /{mId}/buzz)
	GetMIdBuzz(ctx echo.Context, mId string, params GetMIdBuzzParams) error
	// Add new buzz record in db
	// (POST /{mId}/buzz)
	PostMIdBuzz(ctx echo.Context, mId string) error
	// Delete record from database with given id
	// (DELETE /{mId}/buzz/{Id})
	DeleteMIdBuzzId(ctx echo.Context, mId string, id float32) error
	// Returns buzz record with given id
	// (GET /{mId}/buzz/{Id})
	GetMIdBuzzId(ctx echo.Context, mId string, id float32) error
	// Update record in database with given id
	// (PUT /{mId}/buzz/{Id})
	PutMIdBuzzId(ctx echo.Context, mId string, id float32) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCouch converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouch(ctx echo.Context) error {
	var err error

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCouchParams
	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCouch(ctx, params)
	return err
}

// PostCouch converts echo context to params.
func (w *ServerInterfaceWrapper) PostCouch(ctx echo.Context) error {
	var err error

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCouch(ctx)
	return err
}

// DeleteCouchId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCouchId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCouchId(ctx, id)
	return err
}

// GetCouchId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCouchId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCouchId(ctx, id)
	return err
}

// PutCouchId converts echo context to params.
func (w *ServerInterfaceWrapper) PutCouchId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutCouchId(ctx, id)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// GetMIdBuzz converts echo context to params.
func (w *ServerInterfaceWrapper) GetMIdBuzz(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mId" -------------
	var mId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mId", runtime.ParamLocationPath, ctx.Param("mId"), &mId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mId: %s", err))
	}

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMIdBuzzParams
	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMIdBuzz(ctx, mId, params)
	return err
}

// PostMIdBuzz converts echo context to params.
func (w *ServerInterfaceWrapper) PostMIdBuzz(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mId" -------------
	var mId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mId", runtime.ParamLocationPath, ctx.Param("mId"), &mId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mId: %s", err))
	}

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMIdBuzz(ctx, mId)
	return err
}

// DeleteMIdBuzzId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMIdBuzzId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mId" -------------
	var mId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mId", runtime.ParamLocationPath, ctx.Param("mId"), &mId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mId: %s", err))
	}

	// ------------- Path parameter "Id" -------------
	var id float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMIdBuzzId(ctx, mId, id)
	return err
}

// GetMIdBuzzId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMIdBuzzId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mId" -------------
	var mId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mId", runtime.ParamLocationPath, ctx.Param("mId"), &mId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mId: %s", err))
	}

	// ------------- Path parameter "Id" -------------
	var id float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMIdBuzzId(ctx, mId, id)
	return err
}

// PutMIdBuzzId converts echo context to params.
func (w *ServerInterfaceWrapper) PutMIdBuzzId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "mId" -------------
	var mId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "mId", runtime.ParamLocationPath, ctx.Param("mId"), &mId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mId: %s", err))
	}

	// ------------- Path parameter "Id" -------------
	var id float32

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	ctx.Set(UserScopes, []string{""})

	ctx.Set(JwtScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutMIdBuzzId(ctx, mId, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/couch", wrapper.GetCouch)
	router.POST(baseURL+"/couch", wrapper.PostCouch)
	router.DELETE(baseURL+"/couch/:Id", wrapper.DeleteCouchId)
	router.GET(baseURL+"/couch/:Id", wrapper.GetCouchId)
	router.PUT(baseURL+"/couch/:Id", wrapper.PutCouchId)
	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.GET(baseURL+"/:mId/buzz", wrapper.GetMIdBuzz)
	router.POST(baseURL+"/:mId/buzz", wrapper.PostMIdBuzz)
	router.DELETE(baseURL+"/:mId/buzz/:Id", wrapper.DeleteMIdBuzzId)
	router.GET(baseURL+"/:mId/buzz/:Id", wrapper.GetMIdBuzzId)
	router.PUT(baseURL+"/:mId/buzz/:Id", wrapper.PutMIdBuzzId)
}
